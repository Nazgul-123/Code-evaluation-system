version: '3.8'

services:
  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"  # Для веб-интерфейса
    networks:
      - app_network
    healthcheck: # Добавляем проверку готовности
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 5s
      timeout: 10s
      retries: 10
    restart: unless-stopped

  github_service_1:
    build:
      context: .
      dockerfile: domain/aggregate/github_service/Dockerfile
    env_file:
      - .env
    container_name: github_service_1
    restart: unless-stopped
    networks:
      - app_network
    depends_on:
      rabbitmq:
        condition: service_healthy  # Ждем готовности RabbitMQ
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://graylog:12201"
        tag: "github_service"

  github_service_2:
    build:
      context: .
      dockerfile: domain/aggregate/github_service/Dockerfile
    env_file:
      - .env
    container_name: github_service_2
    restart: unless-stopped
    networks:
      - app_network
    depends_on:
      rabbitmq:
        condition: service_healthy
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://graylog:12201"
        tag: "github_service"

  report_service:
    build:
      context: .
      dockerfile: domain/aggregate/report_service/Dockerfile
    container_name: report_service
    restart: unless-stopped
    networks:
      - app_network
    depends_on:
      rabbitmq:
        condition: service_healthy
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://graylog:12201"
        tag: "report_service"

  analysis_service:
    build:
      context: .
      dockerfile: models/Dockerfile
    container_name: analysis_service
    restart: unless-stopped
    networks:
      - app_network
    depends_on:
      rabbitmq:
        condition: service_healthy
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://graylog:12201"
        tag: "analysis_service"

  bot:
    build:
      context: .
      dockerfile: bot/Dockerfile
    env_file:
      - .env
    container_name: bot
    restart: unless-stopped
    volumes:
      - ./bot/code_evaluation.db:/app/code_evaluation.db
    networks:
      - app_network
    depends_on:
      - rabbitmq
      - github_service_1
      - github_service_2
      - report_service
      - analysis_service
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://graylog:12201"
        tag: "bot"

  test:
    build:
      context: .
      dockerfile: tests/Dockerfile
    container_name: test_container
    env_file:
      - .env
    networks:
      - app_network
    depends_on:
      - rabbitmq
      - github_service_1
      - github_service_2
      - report_service
      - analysis_service
      - bot
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://graylog:12201"
        tag: "test"

  # Балансировщик нагрузки Nginx
  nginx_load_balancer:
    image: nginx:latest
    container_name: nginx_lb
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    networks:
      - app_network
    depends_on:
      - github_service_1
      - github_service_2

  # MongoDB для Graylog
  mongo:
    image: mongo:5.0
    container_name: mongo
    networks:
      - app_network

  # Elasticsearch для Graylog
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    networks:
      - app_network

  graylog:
    image: graylog/graylog:4.3
    container_name: graylog
    env_file:
      - .env
    depends_on:
      - mongo
      - elasticsearch
    ports:
      - "9000:9000"      # Web-интерфейс Graylog
      - "12201:12201/udp" # GELF UDP для логов
    networks:
      - app_network

networks:
  app_network:
    driver: bridge
