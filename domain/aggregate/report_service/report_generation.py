import json
import asyncio
import aiormq
from aiormq.abc import DeliveredMessage

RABBITMQ_URL = "amqp://rabbitmq"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
analysis_results = {}


class ReportGenerator:
    @staticmethod
    async def generate_report(student_id: str, LLMAssessment: str, staticAnalyserAssessment: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –∫–æ–¥—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ LLM –∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞."""
        return (f"üìä *–û—Ç—á–µ—Ç –ø–æ –∫–æ–¥—É —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_id}:*\n\n"
                f"ü§ñ *–û—Ü–µ–Ω–∫–∞ –ò–ò:* {LLMAssessment}\n"
                f"üõ† *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞:* {staticAnalyserAssessment}\n")


async def send_to_bot_queue(user_id, report):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –≤ `bot_queue`, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç—É."""
    connection = await aiormq.connect(RABBITMQ_URL)
    channel = await connection.channel()
    await channel.queue_declare(queue="bot_queue")
    message = {"user_id": user_id, "report": report}
    await channel.basic_publish(
        exchange="",
        routing_key="bot_queue",
        body=json.dumps(message).encode()
    )
    await connection.close()


async def process_message(message: DeliveredMessage):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞."""
    data = json.loads(message.body.decode())
    user_id = data["user_id"]
    username = data["username"]

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    if user_id not in analysis_results:
        analysis_results[user_id] = {"username": username, "LLMAssessment": None, "staticAnalyserAssessment": None}

    if "LLMAssessment" in data:
        analysis_results[user_id]["LLMAssessment"] = data["LLMAssessment"]
    if "staticAnalyserAssessment" in data:
        analysis_results[user_id]["staticAnalyserAssessment"] = data["staticAnalyserAssessment"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤—ã –ª–∏ –æ–±–∞ –∞–Ω–∞–ª–∏–∑–∞
    if (analysis_results[user_id]["LLMAssessment"] is not None and
            analysis_results[user_id]["staticAnalyserAssessment"] is not None):
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = await ReportGenerator.generate_report(
            username,
            analysis_results[user_id]["LLMAssessment"],
            analysis_results[user_id]["staticAnalyserAssessment"]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ `bot_queue`
        await send_to_bot_queue(user_id, report)

        # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        del analysis_results[user_id]

    await message.channel.basic_ack(delivery_tag=message.delivery_tag)


async def main():
    """–ó–∞–ø—É—Å–∫ RabbitMQ consumer"""
    connection = await aiormq.connect(RABBITMQ_URL)
    channel = await connection.channel()
    await channel.queue_declare(queue="report_queue")

    await channel.basic_consume(
        queue="report_queue",
        consumer_callback=process_message,
        no_ack=False,  # –†—É—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    )
    print("Report-—Å–µ—Ä–≤–∏—Å —Å–ª—É—à–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å `report_queue`...")
    await asyncio.Future()


if __name__ == "__main__":
    asyncio.run(main())
