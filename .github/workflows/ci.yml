name: CI Pipeline

on:
  push:
    branches:
      - main  # Запускать pipeline при пуше в ветку main
  pull_request:
    branches:
      - main  # Запускать pipeline при создании PR в ветку main

jobs:
  lint-and-static-analysis:
    name: Lint and Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 mypy black pylint

      - name: Run Flake8 (Linting)
        run: flake8 . || true

      - name: Run Black (Formatting Check)
        run: black --check . || true

      - name: Run Pylint (Code Quality)
        run: pylint $(git ls-files '*.py') --fail-under=5.0 || true

      - name: Run MyPy (Static Analysis)
        run: mypy . --ignore-missing-imports || true

  build-and-test:
    name: Build and Run Tests
    runs-on: ubuntu-latest
    needs: lint-and-static-analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          echo "TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }}" >> .env
          echo "DB_PATH=${{ secrets.DB_PATH }}" >> .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build Docker images
        run: docker-compose -f docker-compose.yml build

      - name: Run Unit Tests
        run: |
          if [ -d "tests/unit" ] && [ "$(ls -A tests/unit/*.py 2>/dev/null)" ]; then
            docker-compose -f docker-compose.yml run --rm test pytest tests/unit --maxfail=0 || true
          else
            echo "Skipping Unit Tests: No test files found"
          fi

      - name: Run Integration Tests
        run: |
          if [ -d "tests/integration" ] && [ "$(ls -A tests/integration/*.py 2>/dev/null)" ]; then
            docker-compose -f docker-compose.yml run --rm test pytest tests/integration --maxfail=0 || true
          else
            echo "Skipping Integration Tests: No test files found"
          fi

      - name: Run End-to-End (E2E) Tests
        run: |
          if [ -d "tests/e2e" ] && [ "$(ls -A tests/e2e/*.py 2>/dev/null)" ]; then
            docker-compose -f docker-compose.yml run --rm test pytest tests/e2e --maxfail=0 || true
          else
            echo "Skipping E2E Tests: No test files found"
          fi

      - name: Push Docker images
        run: docker-compose -f docker-compose.yml push
